package String;
import java.util.Arrays;
/**
 * KMP算法解决字符串
 */
public class KMP {
        public static void main(String[] args) {
            String str1 = "BBC ABCDAB ABCDABCDABDE";
            String str2 = "ABCDABD";
            //String str2 = "BBC";
            int[] next = kmpNext("ABCDABD"); //[0, 1, 2, 0]
            System.out.println("next=" + Arrays.toString(next));
            int index = kmpSearch(str1, str2, next);
            System.out.println("index=" + index); // 15了
        }
        //写出我们的kmp搜索算法
        /**
         * @param str1 源字符串
         * @param str2 子串
         * @param next 部分匹配表, 是子串对应的部分匹配表
         * @return 如果是-1就是没有匹配到，否则返回第一个匹配的位置
         */
        public static int kmpSearch(String str1, String str2, int[] next) {
            //遍历即可 ,i指向字符1，j指向字符2
            for(int i = 0, j = 0; i < str1.length(); i++) {
                //需要处理 str1.charAt(i) ！= str2.charAt(j), 去调整j的大小
                //KMP算法核心点, 可以验证...
                while( j > 0 && str1.charAt(i) != str2.charAt(j)) {//相等或者
                    j = next[j-1];//使用我们的next表
                }
                if(str1.charAt(i) == str2.charAt(j)) {
                    j++;
                }
                if(j == str2.length()) {//找到了返回第一个匹配的位置
                    return i - j + 1;
                }
            }
            return  -1;
        }
        //获取到一个字符串(子串) 的部分匹配值表，自己与自己比较
        public static  int[] kmpNext(String dest) {
            //创建一个next 数组保存部分匹配值
            int[] next = new int[dest.length()];
            next[0] = 0; //如果字符串是长度为1 部分匹配值就是0
            for(int i = 1, j = 0; i < dest.length(); i++) {
                //当dest.charAt(i) != dest.charAt(j) ，我们需要从next[j-1]获取新的j，回溯部分匹配值的前一个位置
                //直到我们发现有dest.charAt(i) == dest.charAt(j)成立才退出
                //这时kmp算法的核心点，不相同的时候j就从next表的前一个匹配变化位置去找，一直找到到j=0退出循环然后next值和j重置为0重新匹配
                while(j > 0 && dest.charAt(i) != dest.charAt(j)) {
                    j = next[j-1];
                }
                //当dest.charAt(i) == dest.charAt(j) 满足时，部分匹配值就是+1,错位匹配，i从第二位开始比较，如果相同就i.j都往后走，j记录的是匹配值，然后赋给当前next[i]
                if(dest.charAt(i) == dest.charAt(j)) {
                    j++;
                }
                next[i] = j;
            }
            return next;
        }
    }
