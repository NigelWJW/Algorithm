package Sort;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
/**
 * 基数排序
 */
public class RadixSort {
        public static void main(String[] args) {
            int arr[] = { 53, 3, 542, 748, 14, 214};
            System.out.println("排序前");
            Date data1 = new Date();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String date1Str = simpleDateFormat.format(data1);
            System.out.println("排序前的时间是=" + date1Str);

            radixSort(arr);

            Date data2 = new Date();
            String date2Str = simpleDateFormat.format(data2);
            System.out.println("排序前的时间是=" + date2Str);
            System.out.println("基数排序后 " + Arrays.toString(arr));
        }
        //基数排序方法
        public static void radixSort(int[] arr) {
            //根据前面的推导过程，我们可以得到最终的基数排序代码
            //1. 得到数组中最大的数的位数
            int max = arr[0]; //假设第一数就是最大数
            for(int i = 1; i < arr.length; i++) {
                if (arr[i] > max) {
                    max = arr[i];
                }
            }
            //得到最大数是几位数
            int maxLength = (max + "").length();
            //定义一个二维数组，表示10个桶, 每个桶就是一个一维数组
            //说明
            //1. 二维数组包含10个一维数组
            //2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length
            //3. 基数排序是使用空间换时间的经典算法
            int[][] bucket = new int[10][arr.length];
            //为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数
            //可以这里理解
            //比如：bucketElementCounts[0],记录的就是bucket[0]桶的放入数据个数，也就是出现次数。
            int[] bucketElementCounts = new int[10];
            //这里我们使用循环将代码处理多少位，最高位多少位就循环多少次
            for(int i = 0 , n = 1; i < maxLength; i++, n *= 10) {
                //针对每个元素的对应位进行排序处理，第一次是个位，第二次是十位，第三次是百位..放数据
                for(int j = 0; j < arr.length; j++) {
                    //取出每个元素的对应位的值保存下来
                    int digitOfElement = arr[j] / n % 10;
                    //放入到对应第几个桶的第几个空位中
                    bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
                    bucketElementCounts[digitOfElement]++;//数据个数加一，指向下一个空位
                }

                //按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)
                int index = 0;
                //遍历每一桶，并将桶中是数据，放入到原数组，重新排列
                for(int k = 0; k < bucketElementCounts.length; k++) {
                    //如果桶中，有数据，我们才放入到原数组
                    if(bucketElementCounts[k] != 0) {
                        //循环该桶即第k个桶(即第k个一维数组)的几个元素, 放回arr数组
                        for(int l = 0; l < bucketElementCounts[k]; l++) {
                            //取出元素放入到arr
                            arr[index++] = bucket[k][l];
                        }
                    }
                    //每一轮轮处理后，将每个k的bucketElementCounts[k]置0 ！！！！
                    bucketElementCounts[k] = 0;
                }
                //System.out.println("第"+(i+1)+"轮，对个位的排序处理 arr =" + Arrays.toString(arr));
            }
        }
    }

